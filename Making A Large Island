class Solution:
    def largestIsland(self, grid : List[List[int]]) -> int:
        
        # Code here
        def dfs(row, col, island_id):
            if row < 0 or row >= n or col < 0 or col >= n or grid[row][col] != 1:
                return 0
            grid[row][col] = island_id
            size = 1
            for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                size += dfs(row + dr, col + dc, island_id)
            return size

        n = len(grid)
        island_sizes = {}  # Dictionary to store island sizes, indexed by island IDs.
        island_id = 2  # Start island IDs from 2 (1 is used for land).
        maxIslandSize = 0

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 1:
                    size = dfs(i, j, island_id)
                    island_sizes[island_id] = size
                    maxIslandSize = max(maxIslandSize, size)
                    island_id += 1

        for i in range(n):
            for j in range(n):
                if grid[i][j] == 0:
                    neighbor_ids = set()
                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                        ni, nj = i + dr, j + dc
                        if 0 <= ni < n and 0 <= nj < n:
                            neighbor_ids.add(grid[ni][nj])
                    size = 1  # Include the current cell as 1
                    for neighbor_id in neighbor_ids:
                        size += island_sizes.get(neighbor_id, 0)
                    maxIslandSize = max(maxIslandSize, size)

        return maxIslandSize

